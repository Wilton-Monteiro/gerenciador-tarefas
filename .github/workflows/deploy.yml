name: Deploy Automatizado com SonarQube

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-analyze-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build e push da imagem Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            willmonteiro/gerenciador-tarefas:01
            willmonteiro/gerenciador-tarefas:latest
            willmonteiro/gerenciador-tarefas:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Setup da chave SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Encontrar porta livre e iniciar SonarQube
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            # Função para encontrar porta livre
            find_free_port() {
              for port in 9000 9001 9002 9003 9004 9005; do
                if ! netstat -tulpn | grep -q ":$port "; then
                  echo $port
                  return
                fi
              done
              echo "9000" # fallback
            }

            # Parar qualquer SonarQube que possa estar rodando
            echo "Limpando containers SonarQube existentes..."
            docker stop $(docker ps -q --filter "name=sonar") 2>/dev/null || true
            docker rm $(docker ps -aq --filter "name=sonar") 2>/dev/null || true
            docker volume rm sonarqube_temp_data sonarqube_temp_logs sonarqube_temp_extensions 2>/dev/null || true

            # Encontrar porta livre
            SONAR_PORT=$(find_free_port)
            echo "Usando porta: $SONAR_PORT"
            echo "SONAR_PORT=$SONAR_PORT" > /tmp/sonar_port.env

            # Verificar o que está usando as portas
            echo "=== PORTAS EM USO ==="
            netstat -tulpn | grep -E ":(9000|9001|9002|9003)" || echo "Nenhuma porta 90xx em uso"

            # Configurar limits do sistema
            echo "Configurando limites do sistema..."
            sudo sysctl -w vm.max_map_count=262144 2>/dev/null || echo "Aviso: vm.max_map_count não configurado"

            # Iniciar SonarQube na porta encontrada
            echo "Iniciando SonarQube na porta $SONAR_PORT..."
            docker run -d --name sonarqube-temp -p $SONAR_PORT:9000 \
              -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true \
              -e SONAR_WEB_JAVAADDITIONALOPTS="-Xmx1536m -Xms512m -XX:+UseG1GC" \
              -e SONAR_CE_JAVAADDITIONALOPTS="-Xmx1024m -Xms512m -XX:+UseG1GC" \
              -e SONAR_SEARCH_JAVAADDITIONALOPTS="-Xmx1024m -Xms512m -XX:+UseG1GC" \
              -v sonarqube_temp_data:/opt/sonarqube/data \
              -v sonarqube_temp_logs:/opt/sonarqube/logs \
              -v sonarqube_temp_extensions:/opt/sonarqube/extensions \
              --memory=3g \
              --memory-swap=3g \
              --oom-kill-disable=false \
              --ulimit nofile=65536:65536 \
              --ulimit nproc=4096:4096 \
              sonarqube:lts-community

            if [ $? -ne 0 ]; then
              echo "❌ Falha ao iniciar container SonarQube"
              exit 1
            fi

            # Aguardar SonarQube iniciar
            echo "Aguardando SonarQube iniciar na porta $SONAR_PORT..."
            TIMEOUT=120
            for i in $(seq 1 $TIMEOUT); do
              # Verificar se container está rodando
              if ! docker ps | grep -q sonarqube-temp; then
                echo "❌ Container parou de funcionar!"
                docker logs sonarqube-temp --tail 50
                exit 1
              fi

              # Testar API
              if curl -s --connect-timeout 5 --max-time 10 "http://localhost:$SONAR_PORT/api/system/status" 2>/dev/null | grep -q '"status":"UP"'; then
                echo "✅ SonarQube pronto na porta $SONAR_PORT! ($i/$TIMEOUT)"
                sleep 15
                
                # Confirmação final
                if curl -s "http://localhost:$SONAR_PORT/api/system/status" 2>/dev/null | grep -q '"status":"UP"'; then
                  echo "✅ SonarQube totalmente operacional!"
                  exit 0
                fi
              fi
              
              if [ $((i % 10)) -eq 0 ]; then
                echo "Aguardando... ($i/$TIMEOUT)"
                docker ps --filter name=sonarqube-temp --format 'table {{.Names}}\t{{.Status}}'
              fi
              sleep 5
            done
            
            echo "❌ Timeout esperando SonarQube"
            docker logs sonarqube-temp --tail 100
            exit 1
          EOF

      - name: Obter porta do SonarQube
        run: |
          SONAR_PORT=$(ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} 'cat /tmp/sonar_port.env | cut -d= -f2')
          echo "SONAR_PORT=$SONAR_PORT" >> $GITHUB_ENV
          echo "SonarQube rodando na porta: $SONAR_PORT"

      - name: Instalar SonarQube Scanner
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - run: npm install -g sonarqube-scanner

      - name: Verificação final antes da análise
        run: |
          echo "Verificando SonarQube na porta $SONAR_PORT..."
          for i in {1..5}; do
            STATUS=$(curl -s --connect-timeout 10 --max-time 15 "http://${{ secrets.SERVER_HOST }}:$SONAR_PORT/api/system/status" 2>/dev/null | jq -r '.status' 2>/dev/null || echo "DOWN")
            if [ "$STATUS" == "UP" ]; then
              echo "✅ SonarQube confirmado como pronto!"
              break
            fi
            echo "Aguardando confirmação... ($i/5)"
            sleep 10
          done

      - name: Rodar análise SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          SONAR_HOST_URL="http://${{ secrets.SERVER_HOST }}:$SONAR_PORT"
          echo "Executando análise em: $SONAR_HOST_URL"
          
          sonar-scanner \
            -Dsonar.projectKey=gerenciador-tarefas \
            -Dsonar.projectName="Gerenciador de Tarefas" \
            -Dsonar.projectVersion=1.0 \
            -Dsonar.sources=. \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.exclusions=**/node_modules/**,**/*.log,front-end/styles.css,**/*.md,**/*.txt,**/*.json \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.scm.provider=git \
            -Dsonar.verbose=false

      - name: Verificar Quality Gate
        run: |
          echo "Aguardando processamento da análise..."
          sleep 30
          
          for i in {1..15}; do
            RESPONSE=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "http://${{ secrets.SERVER_HOST }}:$SONAR_PORT/api/qualitygates/project_status?projectKey=gerenciador-tarefas" 2>/dev/null || echo '{"projectStatus":{"status":"PENDING"}}')
            STATUS=$(echo "$RESPONSE" | jq -r '.projectStatus.status' 2>/dev/null || echo "PENDING")
            
            echo "Tentativa $i/15: Quality Gate = $STATUS"
            
            if [ "$STATUS" == "OK" ]; then
              echo "✅ Quality Gate passou!"
              exit 0
            elif [ "$STATUS" == "ERROR" ]; then
              echo "❌ Quality Gate falhou!"
              echo "$RESPONSE" | jq '.' 2>/dev/null || echo "$RESPONSE"
              exit 1
            elif [ "$STATUS" == "NONE" ]; then
              echo "⚠️  Quality Gate não configurado - continuando..."
              exit 0
            else
              echo "Aguardando análise concluir..."
              sleep 20
            fi
          done
          echo "❌ Timeout aguardando Quality Gate"
          exit 1

      - name: Limpar SonarQube temporário
        if: always()
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            echo "Limpando SonarQube temporário..."
            docker stop sonarqube-temp 2>/dev/null || true
            docker rm sonarqube-temp 2>/dev/null || true
            docker volume rm sonarqube_temp_data sonarqube_temp_logs sonarqube_temp_extensions 2>/dev/null || true
            rm -f /tmp/sonar_port.env
            echo "✅ Limpeza concluída"
          EOF

      - name: Deploy no servidor remoto
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} 'bash -s' << 'EOF'
          echo "Iniciando deploy da aplicação..."
          
          docker-compose -f /home/aluno/gerenciador-tarefas/docker-compose.yml down || true
          docker rmi willmonteiro/gerenciador-tarefas:01 || true
          docker rmi willmonteiro/gerenciador-tarefas:latest || true

          mkdir -p /home/aluno/gerenciador-tarefas
          docker pull willmonteiro/gerenciador-tarefas:01

          cat > /home/aluno/gerenciador-tarefas/docker-compose.yml << 'DOCKERCOMPOSE'
          version: '3.8'

          services:
            app:
              image: willmonteiro/gerenciador-tarefas:01
              ports:
                - "3001:3000"
              depends_on:
                db:
                  condition: service_healthy
              environment:
                - DB_HOST=db
                - DB_PORT=5432
                - DB_NAME=tarefas_db
                - DB_USER=postgres
                - DB_PASSWORD=postgres123
                - NODE_ENV=production
              networks:
                - app-network
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
                interval: 30s
                timeout: 10s
                retries: 3

            db:
              image: postgres:15-alpine
              environment:
                - POSTGRES_DB=tarefas_db
                - POSTGRES_USER=postgres
                - POSTGRES_PASSWORD=postgres123
                - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
              ports:
                - "5435:5432"
              volumes:
                - postgres_data:/var/lib/postgresql/data
              networks:
                - app-network
              restart: unless-stopped
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U postgres"]
                interval: 10s
                timeout: 5s
                retries: 5

          volumes:
            postgres_data:

          networks:
            app-network:
              driver: bridge
          DOCKERCOMPOSE

          cd /home/aluno/gerenciador-tarefas
          docker-compose up -d
          echo "✅ Deploy concluído!"
          EOF

      - name: Verificar aplicação online
        run: |
          echo "Aguardando aplicação inicializar..."
          sleep 30
          
          for i in {1..10}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 10 --max-time 15 "http://${{ secrets.SERVER_HOST }}:3001" || echo "000")
            echo "Tentativa $i/10: HTTP $STATUS"
            
            if [ "$STATUS" = "200" ] || [ "$STATUS" = "302" ] || [ "$STATUS" = "301" ]; then
              echo "✅ Aplicação online!"
              echo "🌐 http://${{ secrets.SERVER_HOST }}:3001"
              exit 0
            fi
            
            sleep 15
          done
          
          echo "❌ Aplicação não respondeu"
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            docker-compose -f /home/aluno/gerenciador-tarefas/docker-compose.yml ps
            docker-compose -f /home/aluno/gerenciador-tarefas/docker-compose.yml logs --tail 20 app
          EOF
          exit 1