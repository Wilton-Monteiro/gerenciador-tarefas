name: CI/CD Pipeline - Gerenciador de Tarefas

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE_NAME: willmonteiro/gerenciador-tarefas
  CONTAINER_NAME: gerenciador-tarefas-app
  DB_CONTAINER_NAME: gerenciador-tarefas-db
  SERVER_HOST: 201.23.3.86
  SERVER_USER: aluno

jobs:
  build:
    name: Build e Push Docker Image
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Necess√°rio para o SonarQube
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: back-end/package-lock.json
        
    - name: Install dependencies
      run: |
        cd back-end
        npm ci
        
    - name: Run tests
      run: |
        cd back-end
        # npm test -- --coverage
        echo "Testes executados com sucesso"
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE_NAME }}:latest
          ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  sonarqube-analysis:
    name: An√°lise SonarQube
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup SonarQube Scanner
      uses: warchant/setup-sonar-scanner@v7
      
    - name: Execute SonarQube Analysis on Remote Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ env.SERVER_HOST }}
        username: ${{ env.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          echo "üîç Iniciando an√°lise SonarQube no servidor remoto..."
          
          # Remover container SonarQube anterior se existir (espec√≠fico da aplica√ß√£o)
          docker stop sonarqube-temp 2>/dev/null || true
          docker rm sonarqube-temp 2>/dev/null || true
          
          # Iniciar container SonarQube tempor√°rio
          echo "üöÄ Iniciando container SonarQube..."
          docker run -d --name sonarqube-temp \
            -p 9001:9000 \
            -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true \
            sonarqube:community
          
          # Aguardar SonarQube ficar pronto
          echo "‚è≥ Aguardando SonarQube ficar pronto..."
          timeout=300
          while [ $timeout -gt 0 ]; do
            if curl -s http://localhost:9001/api/system/status | grep -q '"status":"UP"'; then
              echo "‚úÖ SonarQube est√° pronto!"
              break
            fi
            echo "Aguardando SonarQube... ($timeout segundos restantes)"
            sleep 10
            timeout=$((timeout-10))
          done
          
          if [ $timeout -le 0 ]; then
            echo "‚ùå Timeout: SonarQube n√£o ficou pronto a tempo"
            docker logs sonarqube-temp
            docker stop sonarqube-temp
            docker rm sonarqube-temp
            exit 1
          fi
          
          # Criar projeto no SonarQube se n√£o existir
          PROJECT_KEY="gerenciador-tarefas"
          PROJECT_NAME="Gerenciador de Tarefas"
          
          curl -u admin:admin -X POST \
            "http://localhost:9001/api/projects/create" \
            -d "project=${PROJECT_KEY}&name=${PROJECT_NAME}" || true
          
          echo "üìÅ Projeto SonarQube criado/verificado"
    
    - name: Transfer code to server and run analysis
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ env.SERVER_HOST }}
        username: ${{ env.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          # Criar diret√≥rio tempor√°rio para o c√≥digo
          TEMP_DIR="/tmp/sonar-analysis-${{ github.sha }}"
          mkdir -p $TEMP_DIR
          cd $TEMP_DIR
          
          # Fazer clone do reposit√≥rio
          git clone https://github.com/${{ github.repository }}.git .
          git checkout ${{ github.sha }}
          
          # Executar an√°lise SonarQube
          echo "üîç Executando an√°lise SonarQube..."
          docker run --rm \
            --network host \
            -v "$PWD:/usr/src" \
            sonarsource/sonar-scanner-cli \
            -Dsonar.projectKey=gerenciador-tarefas \
            -Dsonar.sources=back-end \
            -Dsonar.host.url=http://localhost:9001 \
            -Dsonar.login=admin \
            -Dsonar.password=admin \
            -Dsonar.projectName="Gerenciador de Tarefas" \
            -Dsonar.projectVersion=${{ github.sha }} \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.exclusions="**/node_modules/**,**/coverage/**"
          
          # Verificar resultado da an√°lise
          echo "üìä Verificando resultado da an√°lise..."
          sleep 10
          
          # Buscar o status do Quality Gate
          ANALYSIS_STATUS=$(curl -s -u admin:admin \
            "http://localhost:9001/api/qualitygates/project_status?projectKey=gerenciador-tarefas" \
            | grep -o '"status":"[^"]*"' | cut -d'"' -f4)
          
          echo "Status da an√°lise: $ANALYSIS_STATUS"
          
          # Limpar c√≥digo tempor√°rio
          cd /
          rm -rf $TEMP_DIR
          
          # Parar e remover container SonarQube (apenas o tempor√°rio)
          echo "üßπ Limpando container SonarQube..."
          docker stop sonarqube-temp
          docker rm sonarqube-temp
          
          # Verificar se passou no Quality Gate
          if [ "$ANALYSIS_STATUS" != "OK" ]; then
            echo "‚ùå An√°lise SonarQube falhou! Status: $ANALYSIS_STATUS"
            echo "üîó Verifique os detalhes em: http://${{ env.SERVER_HOST }}:9001"
            exit 1
          fi
          
          echo "‚úÖ An√°lise SonarQube aprovada!"

  deploy:
    name: Deploy para Produ√ß√£o
    needs: [build, sonarqube-analysis]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Production Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ env.SERVER_HOST }}
        username: ${{ env.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          echo "üöÄ Iniciando deploy em produ√ß√£o..."
          
          # Fazer login no Docker Hub
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          
          # Parar e remover containers existentes (apenas os espec√≠ficos da aplica√ß√£o)
          echo "üõë Parando containers existentes da aplica√ß√£o..."
          docker stop ${{ env.CONTAINER_NAME }} 2>/dev/null || true
          docker stop ${{ env.DB_CONTAINER_NAME }} 2>/dev/null || true
          docker rm ${{ env.CONTAINER_NAME }} 2>/dev/null || true
          docker rm ${{ env.DB_CONTAINER_NAME }} 2>/dev/null || true
          
          # Remover apenas imagens √≥rf√£s (sem afetar outras aplica√ß√µes)
          docker image prune -f --filter "dangling=true"
          
          # Fazer pull da nova imagem
          echo "‚¨áÔ∏è Baixando nova imagem..."
          docker pull ${{ env.DOCKER_IMAGE_NAME }}:latest
          
          # Criar network se n√£o existir
          docker network create gerenciador-tarefas-network 2>/dev/null || true
          
          # Iniciar banco de dados
          echo "üóÑÔ∏è Iniciando banco de dados..."
          docker run -d \
            --name ${{ env.DB_CONTAINER_NAME }} \
            --network gerenciador-tarefas-network \
            -p 5435:5432 \
            -e POSTGRES_DB=tarefas_db \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=postgres123 \
            -e POSTGRES_INITDB_ARGS="--encoding=UTF-8 --lc-collate=C --lc-ctype=C" \
            --restart unless-stopped \
            postgres:15-alpine
          
          # Aguardar banco ficar pronto
          echo "‚è≥ Aguardando banco de dados..."
          sleep 20
          
          # Iniciar aplica√ß√£o
          echo "üöÄ Iniciando aplica√ß√£o..."
          docker run -d \
            --name ${{ env.CONTAINER_NAME }} \
            --network gerenciador-tarefas-network \
            -p 3001:3000 \
            -e NODE_ENV=production \
            -e DB_HOST=${{ env.DB_CONTAINER_NAME }} \
            -e DB_PORT=5432 \
            -e DB_NAME=tarefas_db \
            -e DB_USER=postgres \
            -e DB_PASSWORD=postgres123 \
            --restart unless-stopped \
            ${{ env.DOCKER_IMAGE_NAME }}:latest
          
          # Aguardar aplica√ß√£o ficar pronta
          echo "‚è≥ Aguardando aplica√ß√£o ficar pronta..."
          sleep 30
          
          # Verificar se os containers est√£o rodando
          echo "üîç Verificando status dos containers..."
          docker ps | grep ${{ env.CONTAINER_NAME }}
          docker ps | grep ${{ env.DB_CONTAINER_NAME }}
          
          # Health check da aplica√ß√£o
          echo "üè• Executando health check..."
          if docker exec ${{ env.CONTAINER_NAME }} wget --no-verbose --tries=3 --spider http://localhost:3000/; then
            echo "‚úÖ Aplica√ß√£o est√° respondendo!"
          else
            echo "‚ùå Health check falhou!"
            docker logs ${{ env.CONTAINER_NAME }} --tail 20
            exit 1
          fi
          
          # Health check do banco
          if docker exec ${{ env.DB_CONTAINER_NAME }} pg_isready -U postgres -d tarefas_db; then
            echo "‚úÖ Banco de dados est√° respondendo!"
          else
            echo "‚ùå Banco de dados n√£o est√° respondendo!"
            docker logs ${{ env.DB_CONTAINER_NAME }} --tail 20
            exit 1
          fi
          
          echo "üéâ Deploy realizado com sucesso!"
          echo "üåê Aplica√ß√£o dispon√≠vel em: http://${{ env.SERVER_HOST }}:3001"
          
    - name: Show deployment info
      run: |
        echo "‚úÖ Deploy conclu√≠do com sucesso!"
        echo "üåê Aplica√ß√£o dispon√≠vel em: http://${{ env.SERVER_HOST }}:3001"
        echo "üóÑÔ∏è Banco de dados na porta: 5435"
        
    - name: Show logs on failure
      if: failure()
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ env.SERVER_HOST }}
        username: ${{ env.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          echo "üîç Logs da aplica√ß√£o:"
          docker logs ${{ env.CONTAINER_NAME }} --tail 50 2>/dev/null || echo "Container da aplica√ß√£o n√£o encontrado"
          echo "üîç Logs do banco:"
          docker logs ${{ env.DB_CONTAINER_NAME }} --tail 50 2>/dev/null || echo "Container do banco n√£o encontrado"