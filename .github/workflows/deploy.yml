name: Deploy Automatizado com SonarQube

on:
  push:
    branches: [ main ]
  
jobs:
  build-analyze-deploy:
    runs-on: ubuntu-latest

on:
  push:
    branches: [ main ]
  
jobs:
  build-analyze-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build e push da imagem Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: willmonteiro/gerenciador-tarefas:01
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Setup da chave SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Preparar e iniciar SonarQube
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            
            
            # Configurar sistema para SonarQube e ElasticSearch
            sudo sysctl -w vm.max_map_count=262144
            sudo sysctl -w fs.file-max=65536
            sudo sysctl -w vm.swappiness=1
            echo "vm.max_map_count=262144" | sudo tee -a /etc/sysctl.conf
            
            # Criar volume Docker para dados persistentes
            docker volume create sonar-temp-vol
            
            # Iniciar SonarQube com configura√ß√µes mais conservadoras
            docker run -d --name sonarqube-temp \
              -p 9000:9000 \
              -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true \
              -e SONAR_JDBC_URL="jdbc:h2:file:/opt/sonarqube/data/sonar;NON_KEYWORDS=VALUE" \
              -e SONAR_WEB_JAVAADDITIONALOPTS="-Xmx768m -Xms256m -XX:+UseG1GC" \
              -e SONAR_CE_JAVAADDITIONALOPTS="-Xmx768m -Xms256m -XX:+UseG1GC" \
              -e SONAR_SEARCH_JAVAADDITIONALOPTS="-Xmx512m -Xms256m" \
              --memory=3g \
              --memory-swap=3g \
              --ulimit nofile=65536:65536 \
              --ulimit memlock=-1:-1 \
              -v sonar-temp-vol:/opt/sonarqube/data \
              --security-opt seccomp=unconfined \
              sonarqube:9.9-community
            
            echo "üöÄ SonarQube iniciado, aguardando inicializa√ß√£o completa..."
            
            # Aguardar inicializa√ß√£o com verifica√ß√£o de sa√∫de mais detalhada
            for i in {1..60}; do
              echo "‚è≥ Verifica√ß√£o $i/60..."
              
              # Verificar se container ainda est√° rodando
              if ! docker ps --format "table {{.Names}}" | grep -q "sonarqube-temp"; then
                echo "‚ùå Container SonarQube parou de executar!"
                docker logs sonarqube-temp --tail 30
                exit 1
              fi
              
              # Verificar logs para mensagens de sucesso ou erro
              LOGS=$(docker logs sonarqube-temp 2>&1 | tail -20)
              
              if echo "$LOGS" | grep -q "SonarQube is operational"; then
                echo "‚úÖ SonarQube est√° operacional!"
                break
              fi
              
              if echo "$LOGS" | grep -qE "(OutOfMemoryError|ERROR.*database|FATAL|Exception in thread)"; then
                echo "‚ùå Erro cr√≠tico detectado nos logs:"
                echo "$LOGS"
                exit 1
              fi
              
              if [ $i -eq 60 ]; then
                echo "‚ùå Timeout aguardando SonarQube ficar operacional"
                echo "üìã √öltimos logs:"
                docker logs sonarqube-temp --tail 30
                exit 1
              fi
              
              sleep 10
            done
            
            # Verificar API espec√≠ficamente
            echo "üîç Verificando API do SonarQube..."
            for i in {1..20}; do
              HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:9000/api/system/status || echo "000")
              if [ "$HTTP_CODE" = "200" ]; then
                API_RESPONSE=$(curl -s http://localhost:9000/api/system/status)
                if echo "$API_RESPONSE" | grep -q '"status":"UP"'; then
                  echo "‚úÖ API do SonarQube confirmada como UP!"
                  break
                fi
              fi
              
              if [ $i -eq 20 ]; then
                echo "‚ùå API n√£o respondeu adequadamente. HTTP Code: $HTTP_CODE"
                curl -v http://localhost:9000/api/system/status || true
                docker logs sonarqube-temp --tail 20
                exit 1
              fi
              
              echo "‚è≥ API ainda n√£o est√° pronta... (HTTP: $HTTP_CODE)"
              sleep 15
            done
          EOF

      - name: Configurar SonarQube e executar an√°lise
        run: |
          # Criar arquivo tempor√°rio com o c√≥digo fonte
          tar -czf source-code.tar.gz --exclude='.git' --exclude='node_modules' --exclude='*.log' .
          
          # Enviar c√≥digo e executar an√°lise no servidor
          scp -o StrictHostKeyChecking=no source-code.tar.gz ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:~/
          
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            # Aguardar estabiliza√ß√£o do SonarQube
            echo "‚è≥ Aguardando SonarQube estabilizar..."
            sleep 60
            
            # Verificar conectividade com SonarQube
            echo "üîç Verificando conectividade com SonarQube..."
            for i in {1..5}; do
              if curl -s -f "http://localhost:9000/api/system/status" | grep -q '"status":"UP"'; then
                echo "‚úÖ SonarQube est√° acess√≠vel e UP!"
                break
              fi
              if [ $i -eq 5 ]; then
                echo "‚ùå SonarQube n√£o est√° acess√≠vel"
                curl -v "http://localhost:9000/api/system/status" || true
                exit 1
              fi
              echo "‚è≥ Tentativa $i/5... aguardando..."
              sleep 15
            done
            
            # Baixar e configurar SonarScanner no servidor
            echo "üì• Baixando SonarScanner no servidor..."
            cd ~
            rm -rf sonar-scanner-* source-analysis 2>/dev/null || true
            wget -q -O sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
            unzip -q sonar-scanner.zip
            export PATH=$PATH:$(pwd)/sonar-scanner-4.8.0.2856-linux/bin
            
            # Extrair c√≥digo fonte
            mkdir -p source-analysis
            cd source-analysis
            tar -xzf ~/source-code.tar.gz
            
            # Criar arquivo de configura√ß√£o
            cat > sonar-project.properties << 'CONFIG'
          sonar.projectKey=gerenciador-tarefas
          sonar.projectName=Gerenciador de Tarefas
          sonar.projectVersion=1.0
          sonar.sources=.
          sonar.sourceEncoding=UTF-8
          sonar.exclusions=**/node_modules/**,**/*.log,**/*.md,**/dist/**,**/build/**,**/.git/**,**/coverage/**,**/*.zip,**/sonar-scanner-*/**,**/.github/**
          sonar.host.url=http://localhost:9000
          sonar.login=admin
          sonar.password=admin
          CONFIG
            
            echo "üìã Configura√ß√£o do projeto:"
            cat sonar-project.properties
            
            echo "üîç Arquivos que ser√£o analisados:"
            find . -type f \( -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" -o -name "*.java" -o -name "*.py" \) | head -20
            
            echo "üìä Iniciando an√°lise do SonarQube..."
            
            # Executar an√°lise local
            sonar-scanner \
              -Dsonar.verbose=true \
              -Dsonar.log.level=INFO || {
              
              echo "‚ùå Falha na an√°lise do SonarQube"
              echo "üìã Verificando status do SonarQube..."
              curl -v "http://localhost:9000/api/system/status" || true
              
              echo "üìã Verificando logs do container SonarQube:"
              docker logs sonarqube-temp --tail 30 || true
              
              exit 1
            }
            
            echo "‚úÖ An√°lise do SonarQube conclu√≠da com sucesso!"
            
            # Limpar arquivos tempor√°rios
            cd ~
            rm -f source-code.tar.gz
            rm -rf source-analysis sonar-scanner-*
          EOF

      - name: Verificar Quality Gate (opcional)
        continue-on-error: true
        run: |
          echo "üîç Verificando Quality Gate..."
          curl -u admin:admin \
            "http://${{ secrets.SERVER_HOST }}:9000/api/qualitygates/project_status?projectKey=gerenciador-tarefas" \
            | jq '.projectStatus.status' || echo "Quality Gate n√£o verificado"

      - name: Limpar SonarQube
        if: always()
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            echo "üßπ Limpando recursos do SonarQube..."
            docker stop sonarqube-temp 2>/dev/null || true
            docker rm sonarqube-temp 2>/dev/null || true
            docker volume rm sonar-temp-vol 2>/dev/null || true
            echo "‚úÖ Limpeza conclu√≠da"
          EOF

      - name: Deploy da aplica√ß√£o
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            echo "üöÄ Iniciando deploy da aplica√ß√£o..."
            
            # Parar aplica√ß√£o atual
            docker stop gerenciador-tarefas 2>/dev/null || true
            docker rm gerenciador-tarefas 2>/dev/null || true
            docker stop postgres-db 2>/dev/null || true
            docker rm postgres-db 2>/dev/null || true
            
            # Criar rede se n√£o existir
            docker network create app-network 2>/dev/null || echo "Rede j√° existe"
            
            # Iniciar banco PostgreSQL
            echo "üìÇ Iniciando banco de dados..."
            docker run -d --name postgres-db \
              --network app-network \
              -e POSTGRES_DB=tarefas_db \
              -e POSTGRES_USER=postgres \
              -e POSTGRES_PASSWORD=postgres123 \
              -v postgres_data:/var/lib/postgresql/data \
              --restart unless-stopped \
              postgres:15-alpine
            
            # Aguardar banco inicializar
            echo "‚è≥ Aguardando banco inicializar..."
            sleep 20
            
            # Verificar se banco est√° pronto
            for i in {1..10}; do
              if docker exec postgres-db pg_isready -U postgres; then
                echo "‚úÖ Banco PostgreSQL est√° pronto!"
                break
              fi
              if [ $i -eq 10 ]; then
                echo "‚ùå Banco n√£o inicializou corretamente"
                docker logs postgres-db --tail 10
                exit 1
              fi
              sleep 3
            done
            
            # Iniciar aplica√ß√£o
            echo "üåê Iniciando aplica√ß√£o..."
            docker run -d --name gerenciador-tarefas \
              --network app-network \
              -p 3001:3000 \
              -e DB_HOST=postgres-db \
              -e DB_PORT=5432 \
              -e DB_NAME=tarefas_db \
              -e DB_USER=postgres \
              -e DB_PASSWORD=postgres123 \
              -e NODE_ENV=production \
              --restart unless-stopped \
              willmonteiro/gerenciador-tarefas:01
            
            echo "‚úÖ Deploy conclu√≠do!"
          EOF

      - name: Verificar sa√∫de da aplica√ß√£o
        run: |
          echo "üîç Verificando sa√∫de da aplica√ß√£o..."
          sleep 45
          
          # Verificar se containers est√£o rodando
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            echo "üìä Status dos containers:"
            docker ps --filter "name=gerenciador-tarefas" --filter "name=postgres-db"
            
            echo "üìã Logs da aplica√ß√£o (√∫ltimas 10 linhas):"
            docker logs gerenciador-tarefas --tail 10
          EOF
          
          # Testar conectividade HTTP
          for i in {1..15}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.SERVER_HOST }}:3001 || echo "000")
            if [ "$STATUS" = "200" ] || [ "$STATUS" = "302" ] || [ "$STATUS" = "301" ]; then
              echo "‚úÖ Aplica√ß√£o est√° online em http://${{ secrets.SERVER_HOST }}:3001"
              echo "üìä Status HTTP: $STATUS"
              exit 0
            fi
            echo "‚è≥ Tentativa $i/15... Status HTTP: $STATUS"
            sleep 10
          done
          
          echo "‚ùå Aplica√ß√£o n√£o est√° respondendo corretamente"
          echo "üîç Verificando logs para diagn√≥stico..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            echo "=== LOGS DA APLICA√á√ÉO ==="
            docker logs gerenciador-tarefas --tail 20
            echo "=== LOGS DO BANCO ==="
            docker logs postgres-db --tail 10
          EOF
          exit 1

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build e push da imagem Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: willmonteiro/gerenciador-tarefas:01
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Setup da chave SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Iniciar SonarQube e executar an√°lise
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            # Configurar sistema
            sudo sysctl -w vm.max_map_count=262144
            sudo sysctl -w fs.file-max=65536
            
            
            # Iniciar SonarQube
            docker run -d --name sonarqube-temp \
              -p 9000:9000 \
              -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true \
              --memory=3g \
              --ulimit nofile=65536:65536 \
              sonarqube:9.9-community
            
            # Aguardar inicializa√ß√£o
            echo "Aguardando SonarQube inicializar..."
            for i in {1..60}; do
              if curl -s http://localhost:9000/api/system/status | grep -q '"status":"UP"'; then
                echo "‚úÖ SonarQube iniciado com sucesso!"
                break
              fi
              if [ $i -eq 60 ]; then
                echo "‚ùå Timeout aguardando SonarQube"
                docker logs sonarqube-temp --tail 20
                exit 1
              fi
              sleep 10
            done
          EOF

      - name: Executar an√°lise SonarQube
        run: |
          # Instalar scanner
          wget -O sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
          unzip sonar-scanner.zip
          export PATH=$PATH:$(pwd)/sonar-scanner-4.8.0.2856-linux/bin
          
          # Executar an√°lise
          sonar-scanner \
            -Dsonar.projectKey=gerenciador-tarefas \
            -Dsonar.projectName="Gerenciador de Tarefas" \
            -Dsonar.sources=. \
            -Dsonar.host.url=http://${{ secrets.SERVER_HOST }}:9000 \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.exclusions=**/node_modules/**,**/*.log,**/*.md,**/dist/**,**/build/** \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.qualitygate.timeout=300

      - name: Limpar SonarQube
        if: always()
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            docker stop sonarqube-temp 2>/dev/null || true
            docker rm sonarqube-temp 2>/dev/null || true
          EOF

      - name: Deploy da aplica√ß√£o
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            # Parar aplica√ß√£o atual
            docker stop gerenciador-tarefas 2>/dev/null || true
            docker rm gerenciador-tarefas 2>/dev/null || true
            docker stop postgres-db 2>/dev/null || true
            docker rm postgres-db 2>/dev/null || true
            
            # Criar rede
            docker network create app-network 2>/dev/null || true
            
            # Iniciar banco
            docker run -d --name postgres-db \
              --network app-network \
              -e POSTGRES_DB=tarefas_db \
              -e POSTGRES_USER=postgres \
              -e POSTGRES_PASSWORD=postgres123 \
              -v postgres_data:/var/lib/postgresql/data \
              postgres:15-alpine
            
            # Aguardar banco inicializar
            sleep 15
            
            # Iniciar aplica√ß√£o
            docker run -d --name gerenciador-tarefas \
              --network app-network \
              -p 3001:3000 \
              -e DB_HOST=postgres-db \
              -e DB_PORT=5432 \
              -e DB_NAME=tarefas_db \
              -e DB_USER=postgres \
              -e DB_PASSWORD=postgres123 \
              -e NODE_ENV=production \
              willmonteiro/gerenciador-tarefas:01
          EOF

      - name: Verificar aplica√ß√£o
        run: |
          echo "Aguardando aplica√ß√£o inicializar..."
          sleep 30
          
          for i in {1..10}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.SERVER_HOST }}:3001 || echo "000")
            if [ "$STATUS" = "200" ] || [ "$STATUS" = "302" ]; then
              echo "‚úÖ Aplica√ß√£o online em http://${{ secrets.SERVER_HOST }}:3001"
              exit 0
            fi
            echo "Tentativa $i/10... Status: $STATUS"
            sleep 15
          done
          
          echo "‚ùå Aplica√ß√£o n√£o respondeu"
          exit 1