name: Deploy Automatizado com SonarQube

on:
  push:
    branches: [ main ]
  
jobs:
  build-analyze-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build e push da imagem Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: willmonteiro/gerenciador-tarefas:01
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Setup da chave SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Iniciar SonarQube e executar análise
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            # Configurar sistema
            sudo sysctl -w vm.max_map_count=262144
            sudo sysctl -w fs.file-max=65536
            
            # Iniciar SonarQube
            docker run -d --name sonarqube-temp \
              -p 9000:9000 \
              -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true \
              --memory=3g \
              --ulimit nofile=65536:65536 \
              sonarqube:9.9-community
            
            # Aguardar inicialização
            echo "Aguardando SonarQube inicializar..."
            for i in {1..60}; do
              if curl -s http://localhost:9000/api/system/status | grep -q '"status":"UP"'; then
                echo "✅ SonarQube iniciado com sucesso!"
                break
              fi
              if [ $i -eq 60 ]; then
                echo "❌ Timeout aguardando SonarQube"
                docker logs sonarqube-temp --tail 20
                exit 1
              fi
              sleep 10
            done
          EOF

      - name: Executar análise SonarQube
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          # Atualizar pacotes e instalar unzip
          sudo apt-get update
          sudo apt-get install -y unzip wget openjdk-11-jre

          
          wget -O sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
          unzip sonar-scanner.zip

          
          cd sonar-scanner-4.8.0.2856-linux

          
          ./bin/sonar-scanner \
            -Dsonar.projectKey=gerenciador-tarefas \
            -Dsonar.projectName="Gerenciador de Tarefas" \
            -Dsonar.sources=. \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.exclusions=**/node_modules/**,**/*.log,**/*.md,**/dist/**,**/build/** \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.qualitygate.timeout=300
          EOF


      - name: Limpar SonarQube
        if: always()
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            docker stop sonarqube-temp 2>/dev/null || true
            docker rm sonarqube-temp 2>/dev/null || true
          EOF

      - name: Deploy da aplicação
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            # Parar aplicação atual
            docker stop gerenciador-tarefas 2>/dev/null || true
            docker rm gerenciador-tarefas 2>/dev/null || true
            docker stop postgres-db 2>/dev/null || true
            docker rm postgres-db 2>/dev/null || true
            
            # Criar rede
            docker network create app-network 2>/dev/null || true
            
            # Iniciar banco
            docker run -d --name postgres-db \
              --network app-network \
              -e POSTGRES_DB=tarefas_db \
              -e POSTGRES_USER=postgres \
              -e POSTGRES_PASSWORD=postgres123 \
              -v postgres_data:/var/lib/postgresql/data \
              postgres:15-alpine
            
            # Aguardar banco inicializar
            sleep 15
            
            # Iniciar aplicação
            docker run -d --name gerenciador-tarefas \
              --network app-network \
              -p 8248-8253:3000 \
              -e DB_HOST=postgres-db \
              -e DB_PORT=5432 \
              -e DB_NAME=tarefas_db \
              -e DB_USER=postgres \
              -e DB_PASSWORD=postgres123 \
              -e NODE_ENV=production \
              willmonteiro/gerenciador-tarefas:01
          EOF

      - name: Verificar aplicação
        run: |
          echo "Aguardando aplicação inicializar..."
          sleep 30
          
          # Tentativa para qualquer porta no intervalo 8248-8253
          for port in {8248..8253}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.SERVER_HOST }}:$port || echo "000")
            if [ "$STATUS" = "200" ] || [ "$STATUS" = "302" ]; then
              echo "✅ Aplicação online em http://${{ secrets.SERVER_HOST }}:$port"
              exit 0
            fi
          done

          echo "❌ Aplicação não respondeu em nenhuma porta do intervalo 8248-8253"
          exit 1
