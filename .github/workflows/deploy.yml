name: Deploy Automatizado com SonarQube

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-analyze-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build e push da imagem Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            willmonteiro/gerenciador-tarefas:01
            willmonteiro/gerenciador-tarefas:latest
            willmonteiro/gerenciador-tarefas:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Setup da chave SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Start SonarQube temporário no servidor remoto
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            docker stop sonarqube-temp 2>/dev/null || true
            docker rm sonarqube-temp 2>/dev/null || true

            docker run -d --name sonarqube-temp -p 9000:9000 \
              -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true sonarqube:lts-community

            echo "Aguardando SonarQube iniciar..."
            for i in {1..40}; do
              if curl -s http://localhost:9000/api/system/status | grep -q '"status":"UP"'; then
                echo "✅ SonarQube está pronto!"
                exit 0
              fi
              echo "Esperando SonarQube... ($i/40)"
              sleep 10
            done
            echo "❌ Timeout esperando SonarQube"
            exit 1
          EOF

      - name: Instalar SonarQube Scanner
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - run: npm install -g sonarqube-scanner

      - name: Rodar análise SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: http://${{ secrets.SERVER_HOST }}:9000
        run: |
          sonar-scanner \
            -Dsonar.projectKey=gerenciador-tarefas \
            -Dsonar.sources=. \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.exclusions=node_modules/**,**/node_modules/**,*.log,front-end/styles.css

      - name: Verificar Quality Gate
        run: |
          for i in {1..5}; do
            STATUS=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "http://${{ secrets.SERVER_HOST }}:9000/api/qualitygates/project_status?projectKey=gerenciador-tarefas" | jq -r '.projectStatus.status')
            if [ "$STATUS" == "OK" ]; then
              echo "✅ Quality Gate passou!"
              exit 0
            elif [ "$STATUS" == "ERROR" ]; then
              echo "❌ Quality Gate falhou!"
              exit 1
            else
              echo "Tentativa $i/5: aguardando análise..."
              sleep 10
            fi
          done
          echo "❌ Timeout aguardando Quality Gate"
          exit 1

      - name: Parar container SonarQube
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            docker stop sonarqube-temp 2>/dev/null || true
            docker rm sonarqube-temp 2>/dev/null || true
          EOF

      - name: Deploy no servidor remoto
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            docker-compose -f /home/aluno/gerenciador-tarefas/docker-compose.yml down || true
            docker rmi willmonteiro/gerenciador-tarefas:01 || true
            docker rmi willmonteiro/gerenciador-tarefas:latest || true

            mkdir -p /home/aluno/gerenciador-tarefas

            docker pull willmonteiro/gerenciador-tarefas:01

            cat > /home/aluno/gerenciador-tarefas/docker-compose.yml << 'COMPOSE_EOF'
version: '3.8'

services:
  app:
    image: willmonteiro/gerenciador-tarefas:01
    ports:
      - "3001:3000"
    depends_on:
      - db
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=tarefas_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
    networks:
      - app-network
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=tarefas_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
    ports:
      - "5435:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
COMPOSE_EOF

            cd /home/aluno/gerenciador-tarefas
            docker-compose up -d
          EOF

      - name: Verificar aplicação online
        run: |
          sleep 15
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.SERVER_HOST }}:3001 || echo "000")
          if [ "$STATUS" = "200" ] || [ "$STATUS" = "302" ]; then
            echo "✅ Aplicação está no ar!"
          else
            echo "❌ Erro na aplicação. Status HTTP: $STATUS"
            exit 1
          fi