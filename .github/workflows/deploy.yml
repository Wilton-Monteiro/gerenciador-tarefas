name: Deploy Automatizado com SonarQube

on:
  push:
    branches: [ main ]
  
jobs:
  build-analyze-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build e push da imagem Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: docker push willmonteiro/gerenciador-tarefas:04
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Setup da chave SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Verificar recursos do servidor
        run: |
           ssh -o StrictHostKeyChecking=no aluno@201.23.3.86 '
           echo "=== Verificando recursos ==="
           free -h
           df -h
           echo "=========================="
           '

      - name: Subir SonarQube temporário no servidor remoto (com checagem)
        run: |
          ssh -o StrictHostKeyChecking=no aluno@201.23.3.86 '
            echo "Iniciando SonarQube temporário..."
            docker stop sonartmp || true && docker rm sonartmp || true
            echo "stopando"
            docker pull sonarqube:community
            docker run -d --name sonartmp -p 8250:9000 sonarqube:community
            sleep 10
            if ! docker ps | grep sonartmp; then
              echo "--- Falha ao iniciar SonarQube ---"
              docker logs sonartmp || true
              exit 1
            fi
          '

      - name: Download and install jq on remote server
        run: |
          ssh -o StrictHostKeyChecking=no aluno@201.23.3.86 '
            wget -qO /home/aluno/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 && chmod +x /home/aluno/jq
          '
      - name: Esperar SonarQube inicializar via API
        env:
          SONAR_USER: admin 
          SONAR_PASS: admin 
        run: |
          ssh -o StrictHostKeyChecking=no aluno@201.23.3.86 '
            # Este bloco inteiro será executado no servidor remoto (201.23.3.86)

            # Define o caminho absoluto para o jq
            JQ_PATH="/home/aluno/jq"

            echo "Aguardando SonarQube atingir status '"UP"'..."
            for i in {1..50}; do
              # Usa sintaxe correta para curl -u e caminho absoluto para jq
              STATUS=$(curl -s -u "$SONAR_USER:$SONAR_PASS" "http://localhost:8250/api/system/status" | "$JQ_PATH" -r .status)
              echo "Status atual: $STATUS"
              if [ "$STATUS" = "UP" ]; then
                echo "SonarQube online."
                exit 0
              fi
              sleep 6
            done
            echo "SonarQube não subiu a tempo! Log:"
            docker logs sonartmp
            exit 1
          '  
      - name: Criar token do admin via API REST
        id: get_sonar_token
        env:
          SONAR_USER: admin 
          SONAR_PASS: admin 
        run: |
          # Define o caminho absoluto para o jq
          JQ_PATH="/home/aluno/jq"
          # Executa o comando via SSH usando o caminho absoluto do jq
          SONAR_TOKEN=$(ssh -o StrictHostKeyChecking=no aluno@201.23.3.86 "curl -s -u \"$SONAR_USER:$SONAR_PASS\" -X POST 'http://localhost:8250/api/user_tokens/generate?name=ci-token' | \"$JQ_PATH\" -r .token")
          echo "::add-mask::$SONAR_TOKEN"
          echo "SONAR_TOKEN=$SONAR_TOKEN" >> $GITHUB_ENV

      - name: Instalar SonarScanner CLI
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip -o sonar-scanner.zip

      - name: Rodar análise SonarScanner apontando para SonarQube remoto
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
        run: |
          export PATH="$PWD/sonar-scanner-5.0.1.3006-linux/bin:$PATH"
          sonar-scanner -X \
            -Dsonar.projectKey=gerenciador-tarefas \
            -Dsonar.source=src \
            -Dsonar.host.url=http://201.23.3.86:8250 \
            -Dsonar.token=$SONAR_TOKEN
           


      - name: Limpar SonarQube
        if: always()
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          docker stop sonartmp 2>/dev/null || true
          docker rm sonartmp 2>/dev/null || true
          EOF

      - name: Deploy da aplicação
        run: |
         ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
         # Parar aplicação atual
         docker stop gerenciador-tarefas 2>/dev/null || true
         docker rm gerenciador-tarefas 2>/dev/null || true
         docker stop db 2>/dev/null || true
         docker rm db 2>/dev/null || true
      
         # Limpar rede antiga se existir
         docker network rm app-network 2>/dev/null || true
      
         # Criar rede (mesmo nome que docker-compose cria)
         docker network create app-network --driver bridge
      
         # Iniciar banco EXATAMENTE como no seu docker-compose local
         docker run -d --name db \
          --network app-network \
          -p 5435:5432 \
          -e DB_HOST=db \
          -e DB_PORT=5432 \
          -e DB_NAME=tarefas_db \
          -e DB_USER=postgres \
          -e DB_PASSWORD=postgres123 \
          -v postgres_data:/var/lib/postgresql/data \
          --health-cmd="pg_isready -U postgres -d tarefas_db" \
          --health-interval=30s \
          --health-timeout=10s \
          --health-retries=5 \
          --health-start-period=60s \
          --restart unless-stopped \
          postgres:15-alpine
      
         # Aguardar banco ficar completamente saudável
         echo "Aguardando banco de dados ficar saudável..."
         for i in {1..60}; do
         HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' db 2>/dev/null || echo "starting")
         echo "Tentativa $i/60: Status do banco = $HEALTH_STATUS"
         if [ "$HEALTH_STATUS" = "healthy" ]; then
          echo "Banco de dados está saudável!"
          break
         fi
         sleep 2
         done
      
         # Verificação extra - testar conexão diretamente
         docker exec db pg_isready -U postgres -d tarefas_db
         if [ $? -ne 0 ]; then
         echo "ERRO: Banco não está pronto mesmo com status healthy!"
         docker logs db
         exit 1
         fi
      
         # Aguardar mais um pouco para garantir
         sleep 5
      
         
         docker run -d --name gerenciador-tarefas \
         --network app-network \
         --restart unless-stopped \
         -p 8248:3000 \
         -e DB_HOST=db \
         -e DB_PORT=5432 \
         -e DB_NAME=tarefas_db \
         -e DB_USER=postgres \
         -e DB_PASSWORD=postgres123 \
         -e NODE_ENV=production \
         --health-cmd="curl -f http://localhost:3000 || exit 1" \
         --health-interval=30s \
         --health-timeout=10s \
         --health-retries=3 \
         --health-start-period=40s \
         docker push willmonteiro/gerenciador-tarefas:04
         EOF

      - name: Verificar aplicação
        run: |
          echo "Aguardando aplicação inicializar..."
          sleep 30
          
          # Tentativa para qualquer porta no intervalo 8248-8253
          for port in {8248..8253}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.SERVER_HOST }}:$port || echo "000")
            if [ "$STATUS" = "200" ] || [ "$STATUS" = "302" ]; then
              echo "✅ Aplicação online em http://${{ secrets.SERVER_HOST }}:$port"
              exit 0
            fi
          done

          echo "❌ Aplicação não respondeu em nenhuma porta do intervalo 8248-8253"
          exit 1