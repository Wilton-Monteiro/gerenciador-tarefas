name: Deploy Automatizado com SonarQube

on:
  push:
    branches: [ main ]
  
jobs:
  build-analyze-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build e push da imagem Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: willmonteiro/gerenciador-tarefas:01
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Setup da chave SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Preparar e iniciar SonarQube
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            
            
            # Configurar sistema para SonarQube
            sudo sysctl -w vm.max_map_count=262144
            sudo sysctl -w fs.file-max=65536
            echo "vm.max_map_count=262144" | sudo tee -a /etc/sysctl.conf
            
            # Criar diret√≥rio tempor√°rio para dados do SonarQube
            mkdir -p ~/sonar-temp-data
            chmod 777 ~/sonar-temp-data
            
            # Iniciar SonarQube com configura√ß√µes otimizadas
            docker run -d --name sonarqube-temp \
              -p 9000:9000 \
              -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true \
              -e SONAR_JDBC_URL=jdbc:h2:mem:sonar \
              -e SONAR_WEB_JAVAADDITIONALOPTS="-Xmx1024m -Xms512m" \
              -e SONAR_CE_JAVAADDITIONALOPTS="-Xmx1024m -Xms512m" \
              --memory=2g \
              --memory-swap=2g \
              --ulimit nofile=65536:65536 \
              -v ~/sonar-temp-data:/opt/sonarqube/data \
              sonarqube:9.9-community
            
            echo "Aguardando SonarQube inicializar..."
            
            # Verificar logs em tempo real
            timeout 300 sh -c '
              while true; do
                if docker logs sonarqube-temp 2>&1 | grep -q "SonarQube is operational"; then
                  echo "‚úÖ SonarQube operacional!"
                  break
                fi
                if docker logs sonarqube-temp 2>&1 | grep -q "ERROR\|FATAL"; then
                  echo "‚ùå Erro detectado nos logs do SonarQube:"
                  docker logs sonarqube-temp --tail 10
                  exit 1
                fi
                sleep 5
              done
            ' || {
              echo "‚ùå Timeout ou erro na inicializa√ß√£o do SonarQube"
              docker logs sonarqube-temp --tail 20
              exit 1
            }
            
            # Verificar se API est√° respondendo
            for i in {1..30}; do
              if curl -sf http://localhost:9000/api/system/status | grep -q '"status":"UP"'; then
                echo "‚úÖ API do SonarQube est√° UP!"
                break
              fi
              if [ $i -eq 30 ]; then
                echo "‚ùå API do SonarQube n√£o respondeu"
                docker logs sonarqube-temp --tail 20
                exit 1
              fi
              echo "Aguardando API... (tentativa $i/30)"
              sleep 10
            done
          EOF

      - name: Configurar SonarQube e executar an√°lise
        run: |
          # Aguardar um pouco mais para garantir estabilidade
          sleep 30
          
          # Baixar e configurar SonarScanner
          wget -q -O sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
          unzip -q sonar-scanner.zip
          export PATH=$PATH:$(pwd)/sonar-scanner-4.8.0.2856-linux/bin
          
          # Criar arquivo de propriedades do SonarQube
          cat > sonar-project.properties << EOF
          sonar.projectKey=gerenciador-tarefas
          sonar.projectName=Gerenciador de Tarefas
          sonar.projectVersion=1.0
          sonar.sources=.
          sonar.sourceEncoding=UTF-8
          sonar.exclusions=**/node_modules/**,**/*.log,**/*.md,**/dist/**,**/build/**,**/.git/**,**/coverage/**,**/*.zip,**/sonar-scanner-*/**
          sonar.host.url=http://${{ secrets.SERVER_HOST }}:9000
          sonar.login=admin
          sonar.password=admin
          sonar.qualitygate.wait=false
          EOF
          
          echo "üìã Propriedades do projeto:"
          cat sonar-project.properties
          
          echo "üìä Iniciando an√°lise do SonarQube..."
          
          # Executar an√°lise com debug habilitado
          sonar-scanner \
            -Dsonar.verbose=true \
            -X || {
            echo "‚ùå Falha na an√°lise do SonarQube"
            echo "üìã Verificando conectividade com SonarQube..."
            curl -v http://${{ secrets.SERVER_HOST }}:9000/api/system/status || true
            exit 1
          }

      - name: Verificar Quality Gate (opcional)
        continue-on-error: true
        run: |
          echo "üîç Verificando Quality Gate..."
          curl -u admin:admin \
            "http://${{ secrets.SERVER_HOST }}:9000/api/qualitygates/project_status?projectKey=gerenciador-tarefas" \
            | jq '.projectStatus.status' || echo "Quality Gate n√£o verificado"

      - name: Limpar SonarQube
        if: always()
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            echo "üßπ Limpando recursos do SonarQube..."
            docker stop sonarqube-temp 2>/dev/null || true
            docker rm sonarqube-temp 2>/dev/null || true
            rm -rf ~/sonar-temp-data 2>/dev/null || true
            echo "‚úÖ Limpeza conclu√≠da"
          EOF

      - name: Deploy da aplica√ß√£o
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            echo "üöÄ Iniciando deploy da aplica√ß√£o..."
            
            # Parar aplica√ß√£o atual
            docker stop gerenciador-tarefas 2>/dev/null || true
            docker rm gerenciador-tarefas 2>/dev/null || true
            docker stop postgres-db 2>/dev/null || true
            docker rm postgres-db 2>/dev/null || true
            
            # Criar rede se n√£o existir
            docker network create app-network 2>/dev/null || echo "Rede j√° existe"
            
            # Iniciar banco PostgreSQL
            echo "üìÇ Iniciando banco de dados..."
            docker run -d --name postgres-db \
              --network app-network \
              -e POSTGRES_DB=tarefas_db \
              -e POSTGRES_USER=postgres \
              -e POSTGRES_PASSWORD=postgres123 \
              -v postgres_data:/var/lib/postgresql/data \
              --restart unless-stopped \
              postgres:15-alpine
            
            # Aguardar banco inicializar
            echo "‚è≥ Aguardando banco inicializar..."
            sleep 20
            
            # Verificar se banco est√° pronto
            for i in {1..10}; do
              if docker exec postgres-db pg_isready -U postgres; then
                echo "‚úÖ Banco PostgreSQL est√° pronto!"
                break
              fi
              if [ $i -eq 10 ]; then
                echo "‚ùå Banco n√£o inicializou corretamente"
                docker logs postgres-db --tail 10
                exit 1
              fi
              sleep 3
            done
            
            # Iniciar aplica√ß√£o
            echo "üåê Iniciando aplica√ß√£o..."
            docker run -d --name gerenciador-tarefas \
              --network app-network \
              -p 3001:3000 \
              -e DB_HOST=postgres-db \
              -e DB_PORT=5432 \
              -e DB_NAME=tarefas_db \
              -e DB_USER=postgres \
              -e DB_PASSWORD=postgres123 \
              -e NODE_ENV=production \
              --restart unless-stopped \
              willmonteiro/gerenciador-tarefas:01
            
            echo "‚úÖ Deploy conclu√≠do!"
          EOF

      - name: Verificar sa√∫de da aplica√ß√£o
        run: |
          echo "üîç Verificando sa√∫de da aplica√ß√£o..."
          sleep 45
          
          # Verificar se containers est√£o rodando
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            echo "üìä Status dos containers:"
            docker ps --filter "name=gerenciador-tarefas" --filter "name=postgres-db"
            
            echo "üìã Logs da aplica√ß√£o (√∫ltimas 10 linhas):"
            docker logs gerenciador-tarefas --tail 10
          EOF
          
          # Testar conectividade HTTP
          for i in {1..15}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.SERVER_HOST }}:3001 || echo "000")
            if [ "$STATUS" = "200" ] || [ "$STATUS" = "302" ] || [ "$STATUS" = "301" ]; then
              echo "‚úÖ Aplica√ß√£o est√° online em http://${{ secrets.SERVER_HOST }}:3001"
              echo "üìä Status HTTP: $STATUS"
              exit 0
            fi
            echo "‚è≥ Tentativa $i/15... Status HTTP: $STATUS"
            sleep 10
          done
          
          echo "‚ùå Aplica√ß√£o n√£o est√° respondendo corretamente"
          echo "üîç Verificando logs para diagn√≥stico..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            echo "=== LOGS DA APLICA√á√ÉO ==="
            docker logs gerenciador-tarefas --tail 20
            echo "=== LOGS DO BANCO ==="
            docker logs postgres-db --tail 10
          EOF
          exit 1