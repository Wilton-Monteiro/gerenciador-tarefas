name: CI com SonarQube Temporário

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Instalar Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Copiar código para o servidor
        run: |
          scp -o StrictHostKeyChecking=no -r . ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/app

      - name: Subir SonarQube temporário no servidor
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            docker run -d --name sonarqube-temp \
              -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true \
              -p 0:9000 \
              -v sonarqube_temp_data:/opt/sonarqube/data \
              -v sonarqube_temp_logs:/opt/sonarqube/logs \
              -v sonarqube_temp_extensions:/opt/sonarqube/extensions \
              sonarqube:community

            # Esperar container subir
            sleep 30

            # Capturar porta dinâmica
            PORT=$(docker inspect sonarqube-temp \
              --format '{{ (index (index .NetworkSettings.Ports "9000/tcp") 0).HostPort }}')

            echo "PORT=$PORT" > /tmp/sonar_port.env
          EOF

      - name: Copiar arquivo de porta do servidor
        run: |
          scp -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/sonar_port.env ./sonar_port.env

      - name: Definir URL do SonarQube
        run: |
          source ./sonar_port.env
          echo "SONAR_HOST_URL=http://${{ secrets.SERVER_HOST }}:$PORT" >> $GITHUB_ENV

      - name: Instalar scanner SonarQube
        run: |
          npm install -g sonarqube-scanner

      - name: Rodar análise SonarQube
        run: |
          source ./sonar_port.env
          sonar-scanner \
            -Dsonar.projectKey=meu-projeto \
            -Dsonar.sources=. \
            -Dsonar.host.url=http://${{ secrets.SERVER_HOST }}:$PORT \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Verificar Quality Gate
        env:
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          echo "Esperando análise no SonarQube..."
          sleep 15
          # Opcional: implementar verificação com API do SonarQube

      - name: Limpar SonarQube temporário e volumes
        if: always()
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            docker stop sonarqube-temp || true
            docker rm sonarqube-temp || true
            docker volume rm sonarqube_temp_data sonarqube_temp_logs sonarqube_temp_extensions || true
            rm -f /tmp/sonar_port.env
          EOF
