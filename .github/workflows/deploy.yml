name: Deploy Automatizado com SonarQube

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          willmonteiro/gerenciador-tarefas:01
          willmonteiro/gerenciador-tarefas:latest
          willmonteiro/gerenciador-tarefas:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
    
    - name: Run SonarQube Analysis on Remote Server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
        # Limpar containers SonarQube anteriores se existirem
        docker stop sonarqube-temp 2>/dev/null || true
        docker rm sonarqube-temp 2>/dev/null || true
        
        # Iniciar SonarQube tempor√°rio
        docker run -d --name sonarqube-temp \
          -p 9000:9000 \
          -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true \
          sonarqube:lts-community
        
        # Aguardar SonarQube inicializar com timeout
        echo "Aguardando SonarQube inicializar..."
        
        # Fun√ß√£o para verificar se SonarQube est√° pronto
        check_sonarqube() {
          # Tenta diferentes endpoints para verificar se est√° funcionando
          if curl -f -s http://localhost:9000/api/system/health >/dev/null 2>&1; then
            return 0
          elif curl -f -s http://localhost:9000/api/system/status >/dev/null 2>&1; then
            return 0
          elif curl -f -s http://localhost:9000/ >/dev/null 2>&1; then
            return 0
          else
            return 1
          fi
        }
        
        # Aguardar at√© 10 minutos (600 segundos)
        TIMEOUT=600
        ELAPSED=0
        SLEEP_TIME=15
        
        while [ $ELAPSED -lt $TIMEOUT ]; do
          if check_sonarqube; then
            echo "‚úÖ SonarQube est√° pronto!"
            break
          else
            echo "SonarQube ainda n√£o est√° pronto, aguardando... (${ELAPSED}s/${TIMEOUT}s)"
            sleep $SLEEP_TIME
            ELAPSED=$((ELAPSED + SLEEP_TIME))
          fi
        done
        
        # Verifica√ß√£o final
        if [ $ELAPSED -ge $TIMEOUT ]; then
          echo "‚ùå Timeout! SonarQube n√£o ficou pronto em ${TIMEOUT} segundos"
          docker logs sonarqube-temp --tail 50
          exit 1
        fi
        
        # Aguardar mais um pouco para garantir que est√° totalmente inicializado
        echo "Aguardando inicializa√ß√£o completa..."
        sleep 30
        EOF
    
    - name: Setup Node.js for SonarQube Scanner
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install SonarQube Scanner
      run: |
        npm install -g sonarqube-scanner
    
    - name: Run SonarQube Scanner
      env:
        SONAR_TOKEN: admin
        SONAR_HOST_URL: http://${{ secrets.SERVER_HOST }}:9000
      run: |
        sonar-scanner \
          -Dsonar.projectKey=gerenciador-tarefas \
          -Dsonar.sources=. \
          -Dsonar.host.url=$SONAR_HOST_URL \
          -Dsonar.login=admin \
          -Dsonar.password=admin \
          -Dsonar.exclusions=node_modules/**,**/node_modules/**,*.log,front-end/styles.css
    
    - name: Wait for SonarQube Analysis
      run: |
        sleep 30
        # Verificar o status da an√°lise com retry
        MAX_ATTEMPTS=5
        ATTEMPT=1
        
        while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
          echo "Tentativa $ATTEMPT de $MAX_ATTEMPTS para verificar Quality Gate..."
          
          ANALYSIS_STATUS=$(curl -s -u admin:admin "http://${{ secrets.SERVER_HOST }}:9000/api/qualitygates/project_status?projectKey=gerenciador-tarefas" | jq -r '.projectStatus.status' 2>/dev/null || echo "ERROR")
          
          if [ "$ANALYSIS_STATUS" = "OK" ]; then
            echo "‚úÖ SonarQube Quality Gate passou!"
            break
          elif [ "$ANALYSIS_STATUS" = "ERROR" ] || [ "$ANALYSIS_STATUS" = "null" ]; then
            echo "‚ö†Ô∏è Erro ao obter status da an√°lise, tentando novamente..."
            sleep 10
            ATTEMPT=$((ATTEMPT + 1))
          else
            echo "‚ùå SonarQube Quality Gate falhou! Status: $ANALYSIS_STATUS"
            exit 1
          fi
        done
        
        if [ $ATTEMPT -gt $MAX_ATTEMPTS ]; then
          echo "‚ùå N√£o foi poss√≠vel verificar o Quality Gate ap√≥s $MAX_ATTEMPTS tentativas"
          exit 1
        fi
    
    - name: Cleanup SonarQube Container
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
        # Parar e remover container SonarQube tempor√°rio
        docker stop sonarqube-temp 2>/dev/null || true
        docker rm sonarqube-temp 2>/dev/null || true
        echo "Container SonarQube removido"
        EOF
    
    - name: Deploy to Remote Server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
        # Parar e remover containers antigos
        docker-compose -f /home/aluno/gerenciador-tarefas/docker-compose.yml down 2>/dev/null || true
        
        # Remover imagens antigas
        docker rmi willmonteiro/gerenciador-tarefas:01 2>/dev/null || true
        docker rmi willmonteiro/gerenciador-tarefas:latest 2>/dev/null || true
        
        # Criar diret√≥rio se n√£o existir
        mkdir -p /home/aluno/gerenciador-tarefas
        
        # Baixar nova imagem
        docker pull willmonteiro/gerenciador-tarefas:01
        
        # Criar arquivo docker-compose.yml no servidor
        cat > /home/aluno/gerenciador-tarefas/docker-compose.yml << 'COMPOSE_EOF'
        version: '3.8'
        
        services:
          app:
            image: willmonteiro/gerenciador-tarefas:01
            ports:
              - "3001:3000"
            depends_on:
              - db
            environment:
              - DB_HOST=db
              - DB_PORT=5432
              - DB_NAME=tarefas_db
              - DB_USER=postgres
              - DB_PASSWORD=postgres123
            networks:
              - app-network
            restart: unless-stopped
        
          db:
            image: postgres:15-alpine
            environment:
              - POSTGRES_DB=tarefas_db
              - POSTGRES_USER=postgres
              - POSTGRES_PASSWORD=postgres123
            ports:
              - "5435:5432"
            volumes:
              - postgres_data:/var/lib/postgresql/data
            networks:
              - app-network
            restart: unless-stopped
        
        volumes:
          postgres_data:
        
        networks:
          app-network:
            driver: bridge
        COMPOSE_EOF
        
        # Iniciar containers
        cd /home/aluno/gerenciador-tarefas
        docker-compose up -d
        
        # Verificar se containers est√£o rodando
        sleep 10
        docker-compose ps
        
        echo "Deploy conclu√≠do! Aplica√ß√£o dispon√≠vel em http://201.23.3.86:3001"
        EOF
    
    - name: Verify Deployment
      run: |
        # Aguardar alguns segundos para aplica√ß√£o inicializar
        sleep 20
        
        # Verificar se aplica√ß√£o est√° respondendo
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.SERVER_HOST }}:3001 || echo "000")
        
        if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "301" ] || [ "$HTTP_STATUS" = "302" ]; then
          echo "‚úÖ Aplica√ß√£o est√° rodando! Status: $HTTP_STATUS"
          echo "üåê Acesse: http://${{ secrets.SERVER_HOST }}:3001"
        else
          echo "‚ùå Aplica√ß√£o n√£o est√° respondendo. Status: $HTTP_STATUS"
          exit 1
        fi