name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/gerenciador-tarefas
  DOCKER_TAG: ${{ github.sha }}
  SERVER_HOST: 201.23.3.86
  SERVER_USER: aluno
  CONTAINER_NAME: gerenciador-tarefas
  APP_PORT: 8087

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: back-end/package-lock.json

    - name: Install dependencies
      run: |
        cd back-end
        npm ci

    - name: Run tests (if available)
      run: |
        cd back-end
        npm test --if-present

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          ${{ env.DOCKER_IMAGE }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  sonarqube-analysis:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Necess√°rio para an√°lise completa

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Start SonarQube container on remote server
      run: |
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'EOF'
          # Parar e remover container SonarQube se existir
          docker stop sonarqube-temp 2>/dev/null || true
          docker rm sonarqube-temp 2>/dev/null || true
          
          # Criar volume para dados persistentes tempor√°rios
          docker volume create sonarqube-temp-data 2>/dev/null || true
          
          # Iniciar container SonarQube tempor√°rio
          docker run -d \
            --name sonarqube-temp \
            -p 9000:9000 \
            -v sonarqube-temp-data:/opt/sonarqube/data \
            sonarqube:lts-community
          
          # Aguardar SonarQube inicializar
          echo "Aguardando SonarQube inicializar..."
          timeout=600
          while [ $timeout -gt 0 ]; do
            if curl -s http://localhost:9000/api/system/status 2>/dev/null | grep -q '"status":"UP"'; then
              echo "SonarQube iniciado com sucesso!"
              break
            fi
            echo "Aguardando... ($timeout segundos restantes)"
            sleep 15
            timeout=$((timeout-15))
          done
          
          if [ $timeout -le 0 ]; then
            echo "Timeout: SonarQube n√£o inicializou a tempo"
            docker logs sonarqube-temp
            exit 1
          fi
        EOF

    - name: Setup SonarQube project and token
      run: |
        PROJECT_KEY="gerenciador-tarefas"
        PROJECT_NAME="Gerenciador de Tarefas"
        
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << EOF
          # Aguardar mais um pouco para garantir que est√° totalmente pronto
          sleep 45
          
          # Alterar senha padr√£o do admin (necess√°rio na primeira execu√ß√£o)
          curl -u admin:admin -X POST \
            "http://localhost:9000/api/users/change_password" \
            -d "login=admin&previousPassword=admin&password=admin123" 2>/dev/null || true
          
          # Criar projeto
          curl -u admin:admin123 -X POST \
            "http://localhost:9000/api/projects/create" \
            -d "project=${PROJECT_KEY}&name=${PROJECT_NAME}" 2>/dev/null || true
          
          # Gerar token de an√°lise
          TOKEN_RESPONSE=\$(curl -u admin:admin123 -X POST \
            "http://localhost:9000/api/user_tokens/generate" \
            -d "name=ci-token-\$(date +%s)" 2>/dev/null)
          
          if echo "\$TOKEN_RESPONSE" | grep -q '"token"'; then
            TOKEN=\$(echo \$TOKEN_RESPONSE | grep -o '"token":"[^"]*' | cut -d'"' -f4)
            echo "SONAR_TOKEN=\$TOKEN" > /tmp/sonar_env
            echo "Token gerado com sucesso"
          else
            echo "Erro ao gerar token: \$TOKEN_RESPONSE"
            exit 1
          fi
        EOF

    - name: Create sonar-project.properties
      run: |
        cat > sonar-project.properties << EOF
        sonar.projectKey=gerenciador-tarefas
        sonar.projectName=Gerenciador de Tarefas
        sonar.projectVersion=1.0
        sonar.sources=back-end,front-end
        sonar.exclusions=**/node_modules/**,**/coverage/**,**/*.test.js,**/*.spec.js
        sonar.javascript.lcov.reportPaths=back-end/coverage/lcov.info
        sonar.sourceEncoding=UTF-8
        EOF

    - name: Run SonarQube analysis
      run: |
        # Obter token do servidor
        TOKEN=$(ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "cat /tmp/sonar_env 2>/dev/null | grep SONAR_TOKEN | cut -d'=' -f2")
        
        if [ -z "$TOKEN" ]; then
          echo "Erro: Token n√£o encontrado"
          exit 1
        fi
        
        # Executar an√°lise usando sonar-scanner em container
        docker run --rm \
          -v $(pwd):/usr/src \
          -w /usr/src \
          --add-host host.docker.internal:host-gateway \
          sonarsource/sonar-scanner-cli:latest \
          sonar-scanner \
            -Dsonar.host.url=http://${{ env.SERVER_HOST }}:9000 \
            -Dsonar.login=$TOKEN

    - name: Wait for analysis completion
      run: |
        echo "Aguardando conclus√£o da an√°lise..."
        sleep 30

    - name: Check SonarQube Quality Gate
      run: |
        # Verificar Quality Gate
        QUALITY_GATE_RESPONSE=$(curl -s -u admin:admin123 \
          "http://${{ env.SERVER_HOST }}:9000/api/qualitygates/project_status?projectKey=gerenciador-tarefas")
        
        echo "Resposta do Quality Gate: $QUALITY_GATE_RESPONSE"
        
        QUALITY_GATE=$(echo $QUALITY_GATE_RESPONSE | grep -o '"status":"[^"]*' | cut -d'"' -f4)
        
        echo "Quality Gate Status: $QUALITY_GATE"
        
        if [ "$QUALITY_GATE" != "OK" ]; then
          echo "‚ùå SonarQube Quality Gate falhou!"
          echo "Detalhes da an√°lise dispon√≠veis em: http://${{ env.SERVER_HOST }}:9000/dashboard?id=gerenciador-tarefas"
          exit 1
        else
          echo "‚úÖ SonarQube Quality Gate aprovado!"
        fi

    - name: Cleanup SonarQube container
      if: always()
      run: |
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'EOF'
          # Parar e remover container SonarQube
          docker stop sonarqube-temp 2>/dev/null || true
          docker rm sonarqube-temp 2>/dev/null || true
          
          # Remover volume tempor√°rio
          docker volume rm sonarqube-temp-data 2>/dev/null || true
          
          # Limpar arquivos tempor√°rios
          rm -f /tmp/sonar_env
          
          echo "SonarQube container e dados tempor√°rios removidos"
        EOF

  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-test, sonarqube-analysis]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to server
      run: |
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << EOF
          # Parar e remover container antigo se existir
          docker stop ${{ env.CONTAINER_NAME }} 2>/dev/null || true
          docker rm ${{ env.CONTAINER_NAME }} 2>/dev/null || true
          
          # Fazer pull da nova imagem
          docker pull ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          
          # Executar novo container
          docker run -d \
            --name ${{ env.CONTAINER_NAME }} \
            -p ${{ env.APP_PORT }}:3000 \
            --restart unless-stopped \
            --health-cmd="wget --no-verbose --tries=1 --spider http://localhost:3000/ || exit 1" \
            --health-interval=30s \
            --health-timeout=3s \
            --health-start-period=10s \
            --health-retries=3 \
            ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          
          # Verificar se container est√° rodando
          sleep 10
          if docker ps | grep -q ${{ env.CONTAINER_NAME }}; then
            echo "‚úÖ Deploy realizado com sucesso!"
            echo "üåê Aplica√ß√£o dispon√≠vel em: http://${{ env.SERVER_HOST }}:${{ env.APP_PORT }}"
            
            # Verificar health check
            sleep 20
            HEALTH_STATUS=\$(docker inspect --format='{{.State.Health.Status}}' ${{ env.CONTAINER_NAME }})
            echo "Health Status: \$HEALTH_STATUS"
          else
            echo "‚ùå Falha no deploy - container n√£o est√° rodando"
            docker logs ${{ env.CONTAINER_NAME }} 2>/dev/null || true
            exit 1
          fi
          
          # Limpar imagens antigas (manter apenas as 3 mais recentes)
          docker images ${{ env.DOCKER_IMAGE }} --format "table {{.Tag}}\t{{.ID}}" | tail -n +4 | awk '{print \$2}' | xargs -r docker rmi 2>/dev/null || true
        EOF

    - name: Health check
      run: |
        echo "Executando health check final..."
        sleep 15
        
        # Verificar se a aplica√ß√£o est√° respondendo
        for i in {1..5}; do
          if curl -f -s http://${{ env.SERVER_HOST }}:${{ env.APP_PORT }}; then
            echo "‚úÖ Health check passou - aplica√ß√£o est√° respondendo (tentativa $i)"
            exit 0
          else
            echo "‚è≥ Tentativa $i falhou, aguardando..."
            sleep 10
          fi
        done
        
        echo "‚ùå Health check falhou ap√≥s 5 tentativas"
        
        # Log do container para debug
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "docker logs ${{ env.CONTAINER_NAME }}"
        exit 1

    - name: Deployment summary
      if: success()
      run: |
        echo "üéâ Deploy conclu√≠do com sucesso!"
        echo ""
        echo "üìã Informa√ß√µes do Deploy:"
        echo "‚Ä¢ Aplica√ß√£o: Gerenciador de Tarefas"
        echo "‚Ä¢ URL: http://${{ env.SERVER_HOST }}:${{ env.APP_PORT }}"
        echo "‚Ä¢ Imagem: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}"
        echo "‚Ä¢ Container: ${{ env.CONTAINER_NAME }}"
        echo ""
        echo "üîç Para monitorar:"
        echo "‚Ä¢ Logs: ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} 'docker logs ${{ env.CONTAINER_NAME }}'"
        echo "‚Ä¢ Status: ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} 'docker ps | grep ${{ env.CONTAINER_NAME }}'"